// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// fetch book data from RakutenAPI
	// (GET /books)
	FetchBookData(ctx echo.Context, params FetchBookDataParams) error
	// Get books genres
	// (GET /books-genres)
	GetBooksGenres(ctx echo.Context) error
	// return users chat room list
	// (GET /chat-rooms)
	GetChatRooms(ctx echo.Context) error
	// create chat room
	// (POST /chat-rooms)
	CreateChatRoom(ctx echo.Context) error
	// WebSocket Connection for chat
	// (GET /chats)
	ChatSocket(ctx echo.Context, params ChatSocketParams) error
	// Create like of Comment
	// (POST /comment-likes)
	CreateCommentLike(ctx echo.Context) error
	// delete like of Comment
	// (DELETE /comment-likes/comment/{CommentId})
	DeleteCommentLike(ctx echo.Context, commentId int) error
	// create comment
	// (POST /comments)
	CreateComment(ctx echo.Context) error
	// get comments by postID
	// (GET /comments/post/{postId})
	GetCommentsByPostID(ctx echo.Context, postId int) error
	// delete comment
	// (DELETE /comments/{commentId})
	DeleteComment(ctx echo.Context, commentId int) error
	// get followers connections
	// (GET /followers)
	GetFollowerConnections(ctx echo.Context, params GetFollowerConnectionsParams) error
	// get following connections
	// (GET /followings)
	GetFollowingConnections(ctx echo.Context, params GetFollowingConnectionsParams) error
	// create connection of following
	// (POST /follows)
	CreateConnection(ctx echo.Context) error
	// delete connection of following
	// (DELETE /follows/{connectionId})
	DeleteConnection(ctx echo.Context, connectionId int) error
	// Health Check
	// (GET /health)
	HealthCheck(ctx echo.Context) error
	// Get commentID list of User liked
	// (GET /liked-comments)
	GetLikedCommentList(ctx echo.Context) error
	// Get postID list of User liked
	// (GET /liked-posts)
	GetLikedPostList(ctx echo.Context) error
	// login
	// (POST /login)
	Login(ctx echo.Context) error
	// logout
	// (POST /logout)
	Logout(ctx echo.Context) error
	// return messages in a chat room
	// (GET /messages)
	GetMessages(ctx echo.Context, params GetMessagesParams) error
	// Callback for Google OAuth
	// (GET /oauth/google/callback)
	GoogleOauthCallback(ctx echo.Context, params GoogleOauthCallbackParams) error
	// Create like of Post
	// (POST /post-likes)
	CreatePostLike(ctx echo.Context) error
	// delete like of Post
	// (DELETE /post-likes/post/{PostId})
	DeletePostLike(ctx echo.Context, postId int) error
	// get posts
	// (GET /posts)
	GetPosts(ctx echo.Context) error
	// create post
	// (POST /posts)
	CreatePost(ctx echo.Context) error
	// get posts corresponding to userId
	// (GET /posts/user/{userId})
	GetPostsOfUser(ctx echo.Context, userId int) error
	// delete a post
	// (DELETE /posts/{postId})
	DeletePost(ctx echo.Context, postId int) error
	// get post by postID
	// (GET /posts/{postId})
	GetPostByPostID(ctx echo.Context, postId int) error
	// search user by keyword
	// (GET /search-user)
	SearchUser(ctx echo.Context, params SearchUserParams) error
	// create new user
	// (POST /signup)
	Signup(ctx echo.Context) error
	// get user
	// (GET /user)
	GetLoginUser(ctx echo.Context) error
	// update user
	// (PUT /user)
	UpdateUser(ctx echo.Context) error
	// get user by user_id
	// (GET /user/{userId})
	GetUser(ctx echo.Context, userId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FetchBookData converts echo context to params.
func (w *ServerInterfaceWrapper) FetchBookData(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FetchBookDataParams
	// ------------- Optional query parameter "booksGenreId" -------------

	err = runtime.BindQueryParameter("form", true, false, "booksGenreId", ctx.QueryParams(), &params.BooksGenreId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter booksGenreId: %s", err))
	}

	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FetchBookData(ctx, params)
	return err
}

// GetBooksGenres converts echo context to params.
func (w *ServerInterfaceWrapper) GetBooksGenres(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBooksGenres(ctx)
	return err
}

// GetChatRooms converts echo context to params.
func (w *ServerInterfaceWrapper) GetChatRooms(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetChatRooms(ctx)
	return err
}

// CreateChatRoom converts echo context to params.
func (w *ServerInterfaceWrapper) CreateChatRoom(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateChatRoom(ctx)
	return err
}

// ChatSocket converts echo context to params.
func (w *ServerInterfaceWrapper) ChatSocket(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ChatSocketParams
	// ------------- Required query parameter "room_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "room_id", ctx.QueryParams(), &params.RoomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter room_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ChatSocket(ctx, params)
	return err
}

// CreateCommentLike converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCommentLike(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCommentLike(ctx)
	return err
}

// DeleteCommentLike converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCommentLike(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "CommentId" -------------
	var commentId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "CommentId", runtime.ParamLocationPath, ctx.Param("CommentId"), &commentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CommentId: %s", err))
	}

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCommentLike(ctx, commentId)
	return err
}

// CreateComment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateComment(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateComment(ctx)
	return err
}

// GetCommentsByPostID converts echo context to params.
func (w *ServerInterfaceWrapper) GetCommentsByPostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postId" -------------
	var postId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "postId", runtime.ParamLocationPath, ctx.Param("postId"), &postId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postId: %s", err))
	}

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCommentsByPostID(ctx, postId)
	return err
}

// DeleteComment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "commentId" -------------
	var commentId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "commentId", runtime.ParamLocationPath, ctx.Param("commentId"), &commentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteComment(ctx, commentId)
	return err
}

// GetFollowerConnections converts echo context to params.
func (w *ServerInterfaceWrapper) GetFollowerConnections(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFollowerConnectionsParams
	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFollowerConnections(ctx, params)
	return err
}

// GetFollowingConnections converts echo context to params.
func (w *ServerInterfaceWrapper) GetFollowingConnections(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFollowingConnectionsParams
	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFollowingConnections(ctx, params)
	return err
}

// CreateConnection converts echo context to params.
func (w *ServerInterfaceWrapper) CreateConnection(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateConnection(ctx)
	return err
}

// DeleteConnection converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteConnection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "connectionId" -------------
	var connectionId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "connectionId", runtime.ParamLocationPath, ctx.Param("connectionId"), &connectionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter connectionId: %s", err))
	}

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteConnection(ctx, connectionId)
	return err
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// GetLikedCommentList converts echo context to params.
func (w *ServerInterfaceWrapper) GetLikedCommentList(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLikedCommentList(ctx)
	return err
}

// GetLikedPostList converts echo context to params.
func (w *ServerInterfaceWrapper) GetLikedPostList(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLikedPostList(ctx)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// GetMessages converts echo context to params.
func (w *ServerInterfaceWrapper) GetMessages(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMessagesParams
	// ------------- Required query parameter "room_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "room_id", ctx.QueryParams(), &params.RoomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter room_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMessages(ctx, params)
	return err
}

// GoogleOauthCallback converts echo context to params.
func (w *ServerInterfaceWrapper) GoogleOauthCallback(ctx echo.Context) error {
	var err error

	ctx.Set(Google_authScopes, []string{"email", "profile"})

	ctx.Set(StateScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GoogleOauthCallbackParams
	// ------------- Required query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, true, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GoogleOauthCallback(ctx, params)
	return err
}

// CreatePostLike converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePostLike(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePostLike(ctx)
	return err
}

// DeletePostLike converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostLike(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "PostId" -------------
	var postId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "PostId", runtime.ParamLocationPath, ctx.Param("PostId"), &postId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PostId: %s", err))
	}

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePostLike(ctx, postId)
	return err
}

// GetPosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetPosts(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPosts(ctx)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePost(ctx)
	return err
}

// GetPostsOfUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostsOfUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPostsOfUser(ctx, userId)
	return err
}

// DeletePost converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postId" -------------
	var postId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "postId", runtime.ParamLocationPath, ctx.Param("postId"), &postId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postId: %s", err))
	}

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePost(ctx, postId)
	return err
}

// GetPostByPostID converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostByPostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postId" -------------
	var postId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "postId", runtime.ParamLocationPath, ctx.Param("postId"), &postId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postId: %s", err))
	}

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPostByPostID(ctx, postId)
	return err
}

// SearchUser converts echo context to params.
func (w *ServerInterfaceWrapper) SearchUser(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchUserParams
	// ------------- Required query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, true, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchUser(ctx, params)
	return err
}

// Signup converts echo context to params.
func (w *ServerInterfaceWrapper) Signup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Signup(ctx)
	return err
}

// GetLoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetLoginUser(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLoginUser(ctx)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/books", wrapper.FetchBookData)
	router.GET(baseURL+"/books-genres", wrapper.GetBooksGenres)
	router.GET(baseURL+"/chat-rooms", wrapper.GetChatRooms)
	router.POST(baseURL+"/chat-rooms", wrapper.CreateChatRoom)
	router.GET(baseURL+"/chats", wrapper.ChatSocket)
	router.POST(baseURL+"/comment-likes", wrapper.CreateCommentLike)
	router.DELETE(baseURL+"/comment-likes/comment/:CommentId", wrapper.DeleteCommentLike)
	router.POST(baseURL+"/comments", wrapper.CreateComment)
	router.GET(baseURL+"/comments/post/:postId", wrapper.GetCommentsByPostID)
	router.DELETE(baseURL+"/comments/:commentId", wrapper.DeleteComment)
	router.GET(baseURL+"/followers", wrapper.GetFollowerConnections)
	router.GET(baseURL+"/followings", wrapper.GetFollowingConnections)
	router.POST(baseURL+"/follows", wrapper.CreateConnection)
	router.DELETE(baseURL+"/follows/:connectionId", wrapper.DeleteConnection)
	router.GET(baseURL+"/health", wrapper.HealthCheck)
	router.GET(baseURL+"/liked-comments", wrapper.GetLikedCommentList)
	router.GET(baseURL+"/liked-posts", wrapper.GetLikedPostList)
	router.POST(baseURL+"/login", wrapper.Login)
	router.POST(baseURL+"/logout", wrapper.Logout)
	router.GET(baseURL+"/messages", wrapper.GetMessages)
	router.GET(baseURL+"/oauth/google/callback", wrapper.GoogleOauthCallback)
	router.POST(baseURL+"/post-likes", wrapper.CreatePostLike)
	router.DELETE(baseURL+"/post-likes/post/:PostId", wrapper.DeletePostLike)
	router.GET(baseURL+"/posts", wrapper.GetPosts)
	router.POST(baseURL+"/posts", wrapper.CreatePost)
	router.GET(baseURL+"/posts/user/:userId", wrapper.GetPostsOfUser)
	router.DELETE(baseURL+"/posts/:postId", wrapper.DeletePost)
	router.GET(baseURL+"/posts/:postId", wrapper.GetPostByPostID)
	router.GET(baseURL+"/search-user", wrapper.SearchUser)
	router.POST(baseURL+"/signup", wrapper.Signup)
	router.GET(baseURL+"/user", wrapper.GetLoginUser)
	router.PUT(baseURL+"/user", wrapper.UpdateUser)
	router.GET(baseURL+"/user/:userId", wrapper.GetUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
