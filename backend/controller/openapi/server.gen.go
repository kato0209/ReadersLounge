// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// fetch book data from RakutenAPI
	// (GET /books)
	FetchBookData(ctx echo.Context, params FetchBookDataParams) error
	// Get books genres
	// (GET /books-genres)
	GetBooksGenres(ctx echo.Context) error
	// return users chat room list
	// (GET /chat-rooms)
	GetChatRooms(ctx echo.Context) error
	// create chat room
	// (POST /chat-rooms)
	CreateChatRoom(ctx echo.Context) error
	// WebSocket Connection for chat
	// (GET /chats)
	ChatSocket(ctx echo.Context, params ChatSocketParams) error
	// get csrf token
	// (GET /csrftoken)
	Csrftoken(ctx echo.Context) error
	// login
	// (POST /login)
	Login(ctx echo.Context) error
	// logout
	// (POST /logout)
	Logout(ctx echo.Context) error
	// return messages in a chat room
	// (GET /messages)
	GetMessages(ctx echo.Context, params GetMessagesParams) error
	// Callback for Google OAuth
	// (GET /oauth/google/callback)
	GoogleOauthCallback(ctx echo.Context, params GoogleOauthCallbackParams) error
	// get posts
	// (GET /posts)
	GetPosts(ctx echo.Context) error
	// create post
	// (POST /posts)
	CreatePost(ctx echo.Context) error
	// delete a post
	// (DELETE /posts/{postId})
	DeletePost(ctx echo.Context, postId int) error
	// create new user
	// (POST /signup)
	Signup(ctx echo.Context) error
	// get user
	// (GET /user)
	GetLoginUser(ctx echo.Context) error
	// update user
	// (PUT /user)
	UpdateUser(ctx echo.Context) error
	// get user by user_id
	// (GET /user/{userId})
	GetUser(ctx echo.Context, userId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FetchBookData converts echo context to params.
func (w *ServerInterfaceWrapper) FetchBookData(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	ctx.Set(JwtAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FetchBookDataParams
	// ------------- Optional query parameter "booksGenreId" -------------

	err = runtime.BindQueryParameter("form", true, false, "booksGenreId", ctx.QueryParams(), &params.BooksGenreId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter booksGenreId: %s", err))
	}

	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FetchBookData(ctx, params)
	return err
}

// GetBooksGenres converts echo context to params.
func (w *ServerInterfaceWrapper) GetBooksGenres(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBooksGenres(ctx)
	return err
}

// GetChatRooms converts echo context to params.
func (w *ServerInterfaceWrapper) GetChatRooms(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetChatRooms(ctx)
	return err
}

// CreateChatRoom converts echo context to params.
func (w *ServerInterfaceWrapper) CreateChatRoom(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateChatRoom(ctx)
	return err
}

// ChatSocket converts echo context to params.
func (w *ServerInterfaceWrapper) ChatSocket(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	ctx.Set(JwtAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ChatSocketParams
	// ------------- Required query parameter "room_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "room_id", ctx.QueryParams(), &params.RoomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter room_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ChatSocket(ctx, params)
	return err
}

// Csrftoken converts echo context to params.
func (w *ServerInterfaceWrapper) Csrftoken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Csrftoken(ctx)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// GetMessages converts echo context to params.
func (w *ServerInterfaceWrapper) GetMessages(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	ctx.Set(JwtAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMessagesParams
	// ------------- Required query parameter "room_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "room_id", ctx.QueryParams(), &params.RoomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter room_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMessages(ctx, params)
	return err
}

// GoogleOauthCallback converts echo context to params.
func (w *ServerInterfaceWrapper) GoogleOauthCallback(ctx echo.Context) error {
	var err error

	ctx.Set(Google_authScopes, []string{"email", "profile"})

	ctx.Set(StateScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GoogleOauthCallbackParams
	// ------------- Required query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, true, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GoogleOauthCallback(ctx, params)
	return err
}

// GetPosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetPosts(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPosts(ctx)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePost(ctx)
	return err
}

// DeletePost converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postId" -------------
	var postId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "postId", runtime.ParamLocationPath, ctx.Param("postId"), &postId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postId: %s", err))
	}

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePost(ctx, postId)
	return err
}

// Signup converts echo context to params.
func (w *ServerInterfaceWrapper) Signup(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Signup(ctx)
	return err
}

// GetLoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetLoginUser(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLoginUser(ctx)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/books", wrapper.FetchBookData)
	router.GET(baseURL+"/books-genres", wrapper.GetBooksGenres)
	router.GET(baseURL+"/chat-rooms", wrapper.GetChatRooms)
	router.POST(baseURL+"/chat-rooms", wrapper.CreateChatRoom)
	router.GET(baseURL+"/chats", wrapper.ChatSocket)
	router.GET(baseURL+"/csrftoken", wrapper.Csrftoken)
	router.POST(baseURL+"/login", wrapper.Login)
	router.POST(baseURL+"/logout", wrapper.Logout)
	router.GET(baseURL+"/messages", wrapper.GetMessages)
	router.GET(baseURL+"/oauth/google/callback", wrapper.GoogleOauthCallback)
	router.GET(baseURL+"/posts", wrapper.GetPosts)
	router.POST(baseURL+"/posts", wrapper.CreatePost)
	router.DELETE(baseURL+"/posts/:postId", wrapper.DeletePost)
	router.POST(baseURL+"/signup", wrapper.Signup)
	router.GET(baseURL+"/user", wrapper.GetLoginUser)
	router.PUT(baseURL+"/user", wrapper.UpdateUser)
	router.GET(baseURL+"/user/:userId", wrapper.GetUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
