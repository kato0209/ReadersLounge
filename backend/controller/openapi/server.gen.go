// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Google Sign-Up Callback
	// (GET /auth/google/callback)
	GoogleSignupCallback(ctx echo.Context, params GoogleSignupCallbackParams) error
	// signup with Google
	// (GET /auth/google/signup)
	SignupWithGoogle(ctx echo.Context) error
	// get csrf token
	// (GET /csrftoken)
	Csrftoken(ctx echo.Context) error
	// login
	// (POST /login)
	Login(ctx echo.Context) error
	// logout
	// (POST /logout)
	Logout(ctx echo.Context) error
	// posts
	// (GET /posts)
	Posts(ctx echo.Context) error
	// create new user
	// (POST /signup)
	Signup(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GoogleSignupCallback converts echo context to params.
func (w *ServerInterfaceWrapper) GoogleSignupCallback(ctx echo.Context) error {
	var err error

	ctx.Set(StateScopes, []string{})

	ctx.Set(Google_authScopes, []string{"email", "profile", "openid"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GoogleSignupCallbackParams
	// ------------- Required query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, true, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GoogleSignupCallback(ctx, params)
	return err
}

// SignupWithGoogle converts echo context to params.
func (w *ServerInterfaceWrapper) SignupWithGoogle(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	ctx.Set(Google_authScopes, []string{"email", "profile", "openid"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignupWithGoogle(ctx)
	return err
}

// Csrftoken converts echo context to params.
func (w *ServerInterfaceWrapper) Csrftoken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Csrftoken(ctx)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// Posts converts echo context to params.
func (w *ServerInterfaceWrapper) Posts(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Posts(ctx)
	return err
}

// Signup converts echo context to params.
func (w *ServerInterfaceWrapper) Signup(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Signup(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth/google/callback", wrapper.GoogleSignupCallback)
	router.GET(baseURL+"/auth/google/signup", wrapper.SignupWithGoogle)
	router.GET(baseURL+"/csrftoken", wrapper.Csrftoken)
	router.POST(baseURL+"/login", wrapper.Login)
	router.POST(baseURL+"/logout", wrapper.Logout)
	router.GET(baseURL+"/posts", wrapper.Posts)
	router.POST(baseURL+"/signup", wrapper.Signup)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXX0/jOBD/KpbvHgPpsS+rvEHvjxCrBcGiOwmhynWmqSGxjT0B9VC/+2nskDatw+1y",
	"cE9NMjP2/H7zt89cmsYaDRo9L565l0toRHg8Meaefq0zFhwqCF9Pr06+SlMCPePKAi+4R6d0xdcZFy0u",
	"jUuK5sbcz1S5JVMaoQJHQtWIKn2iQmhmrauTQuuUTJvZdl4rv4RyJpAUFsY19MRLgXCAqgGejVulEaDC",
	"OnXbuj/JzO9AIuleGI/73M07Rn92sOAF/ynfcJ93xOeB9XXGpdEIGpOeSAcCfxDbOMXWeByNjBNIaklZ",
	"6yNTr8G5Jp0kRZfw8MVUSp+YcrVPlXRQgkYl0pFXQbhQyVCt4+lXqtKtff/jI3AtGhi920+9W3wz96AT",
	"V3u3mOGLLG3+mut0+Ui4yPq6C8rQaMRbKiGzUDXMxtPjtfv2wrrOuAfZOoWrK8qAePtfB9Ory98Pvp2f",
	"/faV3pXmBV+CKMHxrPNtqNQfLKw6gxX5URlT1TCjFhOyvjZP4fDYc9TfApXR064zDT5eU/vgS0TrizwX",
	"UppWoz+MBx5K0+QmN2RxlD8e5eGCjHtpbPQeGqHogPDLRFk68J5n3FjQxAs/t6BPf2VTozWR0JPKCz4X",
	"XknWvTOlY60qo0NDoSQYOhfd6FwTVvngXsyWbbqDGp1x94THHSOBVWnMvYINq3dP2CVbglKPAmHUNEr3",
	"zMgNAkJ2JXjplA2ACn4ZIuq/mFZXwI4vTnnfNJOyR3A+Wv5yODmckEfEqbCKF/xT+JRxK3AZwhACk0dm",
	"cinqei5k6KYVhDZI6R6oPaWY/BH0Yh1NX5TpNCcaQHCeFze7/l8RYNarsIVxjHKS4ocgg1YWuXpowa32",
	"qXLw0CoHJS/QtZB10zQ5M3YvP97OWEYTljnA1mko2XzFIh5GHDAP7jFUTsqVMJt/xJNbUvbWaB/T/Wgy",
	"2Q/tC9+Bk4Qv24UfmO1S6+aWkA5K96YrqE2Z9KV0S874tmmEW/UxZBTEg2vLtsKIoqIAcqNKyW/p8kF2",
	"+BD20dyIWfGnwmW8ge8w8GlytM+Ag1I5kMjQJAhgNY2yfRqGne8/sRFBsSeFS9b7nSCC5ks/XpL4p71G",
	"OvRbq4ewtlYymOZ33ujNivhvg38wBEPTGPJ5frbL1gBtBcgICdv0vjxyTLOt266GsMI20aU+eHyZnu+E",
	"ZmtZCWiGBbb+QCa7Feo7GEzk24DUTZISl6bFV8kk+dvZ3F0M1uvv6TNvwkSOBlAExY+m/UWQfmCgwtL/",
	"1kBlz5tZvosx4goQN60tHbfY2z6uCrY20/+5DIZr8bvUQ/wfxTQ8sbYvstjQ437Q9stZkee1kaJeGo/F",
	"58nnCV/frv8JAAD//yCOvcA9DwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
