// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Google Sign-Up Callback
	// (GET /auth/google/callback)
	GoogleSignupCallback(ctx echo.Context, params GoogleSignupCallbackParams) error
	// signup with Google
	// (GET /auth/google/signup)
	SignupWithGoogle(ctx echo.Context) error
	// get csrf token
	// (GET /csrftoken)
	Csrftoken(ctx echo.Context) error
	// login
	// (POST /login)
	Login(ctx echo.Context) error
	// logout
	// (POST /logout)
	Logout(ctx echo.Context) error
	// posts
	// (GET /posts)
	Posts(ctx echo.Context) error
	// create new user
	// (POST /signup)
	Signup(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GoogleSignupCallback converts echo context to params.
func (w *ServerInterfaceWrapper) GoogleSignupCallback(ctx echo.Context) error {
	var err error

	ctx.Set(StateScopes, []string{})

	ctx.Set(Google_authScopes, []string{"email", "profile", "openid"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GoogleSignupCallbackParams
	// ------------- Required query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, true, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GoogleSignupCallback(ctx, params)
	return err
}

// SignupWithGoogle converts echo context to params.
func (w *ServerInterfaceWrapper) SignupWithGoogle(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	ctx.Set(Google_authScopes, []string{"email", "profile", "openid"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignupWithGoogle(ctx)
	return err
}

// Csrftoken converts echo context to params.
func (w *ServerInterfaceWrapper) Csrftoken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Csrftoken(ctx)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// Posts converts echo context to params.
func (w *ServerInterfaceWrapper) Posts(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	ctx.Set(JwtAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Posts(ctx)
	return err
}

// Signup converts echo context to params.
func (w *ServerInterfaceWrapper) Signup(ctx echo.Context) error {
	var err error

	ctx.Set(X_CSRF_TOKENScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Signup(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth/google/callback", wrapper.GoogleSignupCallback)
	router.GET(baseURL+"/auth/google/signup", wrapper.SignupWithGoogle)
	router.GET(baseURL+"/csrftoken", wrapper.Csrftoken)
	router.POST(baseURL+"/login", wrapper.Login)
	router.POST(baseURL+"/logout", wrapper.Logout)
	router.GET(baseURL+"/posts", wrapper.Posts)
	router.POST(baseURL+"/signup", wrapper.Signup)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RXb08juQ/+KlF+v5eF6bFvVvMOen+EWC0IFt1JCFVpxp0GZuIh8YB6q373k5PptNOm",
	"HHsLr2gbO/bz+LEdvkuNdYMWLHmZf5deL6BW4eMZ4iP/bRw24MhA+PX85uyrxgL4My0bkLn05Iwt5Wok",
	"VUsLdMmjGeLj1BRbZ8YSlOD40NSqTN9oCOpp66rkYeOMTrs17awyfgHFVBEbzNHV/EkWiuCITA1ydNgr",
	"jYAMValoq/4mnD2AJra9Qk/73M06Rv/vYC5z+b9sw33WEZ8F1lcjqdESWEpmoh0o+kFshylu0NPByjhF",
	"bJY8a31k6jU4t2yTpOganr5gaewZFst9qrSDAiwZla68CYdzkyzVKt5+Y0rbNu9/fQRuVQ0HY/uJd/Nv",
	"+Ag2Edq7+ZTWZ2n311Ln4AfKxd63XVGGTgey5RbCualgelger8XbK+tqJD3o1hla3rACYvS/jiY3178f",
	"fbu8+O0rfzdW5nIBqgAnR11uQ6P+YtWYC1hyHiViWcGUR0xQfYUv4fI4c8zfigzaSTeZBj/e8viQC6LG",
	"51mmtMbWkj+OFx5rrDPMkD1OsueTLAQYSa+xidlDrQxfEP4KVRQOvJcjiQ1Y5kVeNmDPfxUTtJZJ6EmV",
	"uZwpb7TovgtjY68atGGgsAiGycU0utRUY3xIL6plm+5gxnc8vNBpx0hgVSM+Gtiw+vBCndgSlHpSBAdd",
	"4+meG6fBQNivAK+daQKgXF6Hivov2NoSxOnVueyHZvLsGZyPnr8cj4/HnBFzqhojc/kp/DSSjaJFKEMo",
	"TBaZybSqqpnSYZqWEMYgyz1Qe841+SPYxT6arI35NqdqIHBe5ne7+d8wYNGbiDk6wZrk+hHoYDWKXD21",
	"4Jb7VDl4ao2DQubkWhh12zS5M3aDn24rVvCGFQ6odRYKMVuKiEcwB8KDew6dk0ol7OYfyeSejX2D1ke5",
	"n4zH+6Vd8x04SeSy3fiB2U5ad/eMdNC6d11Dbdqkb6V7Tsa3da3csq+h4CIe3TZiq4ykSi6gRFNoec/B",
	"B+rwoewHtRFV8aehRYwgdxj4ND7ZZ8BBYRxoEoQJAkTFq2yfhuHk+yk2IijxYmgh+rwTRPB+6ddLEv+k",
	"t0iXfuvpoZqmMjq4Zg8e7eaJ+G+Lf7AEw9AY8nl5scvWAG0JJBiJ2My+LHLMu617XQ1hhddEJ33wtN6e",
	"74Rm67ES0AwbbPWWJtqHnBDIgIWNqhg8tvQqej7/7/B3N/nq4zBxogEUQ/EHdXoVTj9Qo+GV/iZtpju5",
	"X767GCOuAHEzi9J1i8Po42S79ZR8u27fawLsBv9Z7cR/fISFF9H69Ys3TuC40Nv+NZVnWYVaVQv0lH8e",
	"fx7L1f3qnwAAAP//Jn7DA+4OAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
