openapi: 3.0.0
info:
  version: 1.0.0
  title: ReadersLounge API
  description: ReadersLounge API
servers:
  - url: "http://localhost:8080"
paths:
  /health:
    get:
      security: []
      summary: Health Check
      operationId: healthCheck
      responses:
        "200":
          description: OK
  /signup:
    post:
      security: []
      summary: create new user
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqSignupBody"
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /login:
    post:
      security: []
      summary: login
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqLoginBody"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /oauth/google/callback:
    get:
      security:
        - google_auth:
            - email
            - profile
        - state: []
      summary: Callback for Google OAuth
      operationId: google_oauth_callback
      parameters:
        - name: state
          in: query
          required: true
          description: State parameter for CSRF protection
          schema:
            type: string
        - name: code
          in: query
          required: true
          description: Authorization code returned by Google auth server
          schema:
            type: string
      responses:
        "302":
          description: Redirect to Home
  /logout:
    post:
      security:
        - jwtAuth: []
      summary: logout
      operationId: logout
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: OK
  /user:
    get:
      security:
        - jwtAuth: []
      summary: get user
      operationId: get-login-user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      security:
        - jwtAuth: []
      summary: update user
      operationId: update-user
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UpdateUserReqBody"
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer

  /user/{userId}:
    get:
      security:
        - jwtAuth: []
      summary: get user by user_id
      operationId: get-user
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique identifier of the user
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /posts:
    get:
      security:
        - jwtAuth: []
      summary: get posts
      operationId: get-posts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
    post:
      security:
        - jwtAuth: []
      summary: create post
      operationId: create-post
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ReqCreatePostBody"
        required: true
      responses:
        "201":
          description: OK

  /posts/{postId}:
    get:
      security:
        - jwtAuth: []
      summary: get post by postID
      operationId: get-post-by-postID
      parameters:
        - name: postId
          in: path
          required: true
          description: identifier of the post to get
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
    delete:
      security:
        - jwtAuth: []
      summary: delete a post
      operationId: delete-post
      parameters:
        - name: postId
          in: path
          required: true
          description: Unique identifier of the post to be deleted
          schema:
            type: integer
      responses:
        "204":
          description: OK, post deleted successfully

  /posts/user/{userId}:
    get:
      security:
        - jwtAuth: []
      summary: get posts corresponding to userId
      operationId: get-posts-of-user
      parameters:
        - name: userId
          in: path
          required: true
          description: identifier of the posts to get
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"

  /books:
    get:
      security:
        - jwtAuth: []
      summary: fetch book data from RakutenAPI
      operationId: fetch-book-data
      parameters:
        - name: booksGenreId
          in: query
          description: ID to specify the genre in Rakuten Books
          schema:
            type: string
        - name: keyword
          in: query
          description: keyword to search books
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"

  /books-genres:
    get:
      security:
        - jwtAuth: []
      summary: Get books genres
      operationId: get-books-genres
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookGenreNode"
  /chats:
    get:
      servers:
        - url: "ws://localhost:8080"
      security:
        - jwtAuth: []
      summary: WebSocket Connection for chat
      operationId: chat-socket
      parameters:
        - name: room_id
          in: query
          required: true
          description: ID to specify the chat room
          schema:
            type: integer
      responses:
        "101":
          description: Switching Protocols
        "401":
          description: You don't have permission to access this room
      x-websocket-doc:
        messageTypes:
          - type: "req-message"
            description: "Chat message sent by a user (schema: #/components/schemas/SendMessageReqBody)"
            payload:
              type: object
              properties:
                content:
                  type: string
                room_id:
                  type: int
          - type: "res-message"
            description: "Chat message recieve from a user (schema: #/components/schemas/Message)"
            payload:
              type: object
              properties:
                message_id:
                  type: int
                user_id:
                  type: int
                content:
                  type: string
                sent_at:
                  type: string
  /chat-rooms:
    get:
      security:
        - jwtAuth: []
      summary: return users chat room list
      operationId: get-chat-rooms
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatRoom"
    post:
      security:
        - jwtAuth: []
      summary: create chat room
      operationId: create-chat-room
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "chat_partner_id"
              properties:
                chat_partner_id:
                  type: integer
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  room_id:
                    type: integer

  /messages:
    get:
      security:
        - jwtAuth: []
      summary: return messages in a chat room
      operationId: get-messages
      parameters:
        - name: room_id
          in: query
          required: true
          description: ID to specify the chat room
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"

  /follows:
    post:
      security:
        - jwtAuth: []
      summary: create connection of following
      operationId: create-connection
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "target_user_id"
              properties:
                target_user_id:
                  type: integer
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"

  /follows/{connectionId}:
    delete:
      security:
        - jwtAuth: []
      summary: delete connection of following
      operationId: delete-connection
      parameters:
        - name: connectionId
          in: path
          required: true
          description: Unique identifier of the connection to be deleted
          schema:
            type: integer
      responses:
        "204":
          description: OK, connection deleted successfully

  /followings:
    get:
      security:
        - jwtAuth: []
      summary: get following connections
      operationId: get-following-connections
      parameters:
        - name: user_id
          in: query
          required: true
          description: ID to specify the user
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Connection"
  /followers:
    get:
      security:
        - jwtAuth: []
      summary: get followers connections
      operationId: get-follower-connections
      parameters:
        - name: user_id
          in: query
          required: true
          description: ID to specify the user
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Connection"

  /post-likes:
    post:
      security:
        - jwtAuth: []
      summary: Create like of Post
      operationId: create-post-like
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePostLikeReqBody"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  post_like_id:
                    type: integer
                required:
                  - post_like_id

  /post-likes/post/{PostId}:
    delete:
      security:
        - jwtAuth: []
      summary: delete like of Post
      operationId: delete-post-like
      parameters:
        - name: PostId
          in: path
          required: true
          description: identifier of the postId of post-likes to be deleted
          schema:
            type: integer
      responses:
        "204":
          description: OK, connection deleted successfully

  /comment-likes:
    post:
      security:
        - jwtAuth: []
      summary: Create like of Comment
      operationId: create-comment-like
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCommentLikeReqBody"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment_like_id:
                    type: integer
                required:
                  - comment_like_id

  /comment-likes/comment/{CommentId}:
    delete:
      security:
        - jwtAuth: []
      summary: delete like of Comment
      operationId: delete-comment-like
      parameters:
        - name: CommentId
          in: path
          required: true
          description: identifier of the CommentId of comment-likes to be deleted
          schema:
            type: integer
      responses:
        "204":
          description: OK, connection deleted successfully

  /liked-posts:
    get:
      security:
        - jwtAuth: []
      summary: Get postID list of User liked
      operationId: get-liked-post-list
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  post_id:
                    type: integer
  /liked-comments:
    get:
      security:
        - jwtAuth: []
      summary: Get commentID list of User liked
      operationId: get-liked-comment-list
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment_id:
                    type: integer

  /search-user:
    get:
      security:
        - jwtAuth: []
      summary: search user by keyword
      operationId: search-user
      parameters:
        - name: keyword
          in: query
          required: true
          description: keyword to search user
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /comments:
    post:
      security:
        - jwtAuth: []
      summary: create comment
      operationId: create-comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqCreateCommentBody"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"

  /comments/{commentId}:
    delete:
      security:
        - jwtAuth: []
      summary: delete comment
      operationId: delete-comment
      parameters:
        - name: commentId
          in: path
          required: true
          description: identifier of the comment to be deleted
          schema:
            type: integer
      responses:
        "204":
          description: OK, comment deleted successfully

  /comments/post/{postId}:
    get:
      security:
        - jwtAuth: []
      summary: get comments by postID
      operationId: get-comments-by-postID
      parameters:
        - name: postId
          in: path
          required: true
          description: identifier of the post to get comments
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"

components:
  securitySchemes:
    jwtAuth:
      type: apiKey
      name: jwt_token
      in: cookie
    google_auth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/v2/auth
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            email: email address
            profile: basic profile information
    state:
      type: apiKey
      name: state
      in: cookie
  schemas:
    ReqSignupBody:
      properties:
        username:
          type: string
        identifier:
          type: string
        credential:
          type: string
    ReqLoginBody:
      properties:
        identifier:
          type: string
        credential:
          type: string
    User:
      type: object
      properties:
        user_id:
          type: integer
        name:
          type: string
        profile_image:
          type: string
        profile_text:
          type: string
      required:
        - user_id
        - name
        - profile_image
    UpdateUserReqBody:
      properties:
        name:
          type: string
        profile_image:
          type: string
          format: binary
        profile_text:
          type: string
    Post:
      type: object
      properties:
        post_id:
          type: integer
        user:
          $ref: "#/components/schemas/User"
        content:
          type: string
        rating:
          type: integer
        image:
          type: string
        created_at:
          type: string
        book:
          $ref: "#/components/schemas/Book"
        likes:
          type: array
          items:
            $ref: "#/components/schemas/PostLike"
      required:
        - post_id
        - user
        - content
        - rating
        - created_at
        - book
    ReqCreatePostBody:
      type: object
      properties:
        content:
          type: string
        rating:
          type: integer
        image:
          type: string
          format: binary
        ISBNcode:
          type: string
      required:
        - content
        - rating
        - ISBNcode
    Book:
      type: object
      properties:
        book_id:
          type: integer
        ISBNcode:
          type: string
        title:
          type: string
        author:
          type: string
        price:
          type: integer
        publisher:
          type: string
        published_at:
          type: string
        item_url:
          type: string
        image:
          type: string
      required:
        - book_id
        - ISBNcode
        - title
        - author
        - price
        - publisher
        - published_at
        - item_url
        - image
    BookGenreNode:
      type: object
      properties:
        id:
          type: integer
        books_genre_id:
          type: string
        books_genre_name:
          type: string
        genre_level:
          type: integer
        parent_genre_id:
          type: string
        children:
          type: array
          items:
            $ref: "#/components/schemas/BookGenreNode"
      required:
        - id
        - books_genre_id
        - books_genre_name
        - genre_level
        - parent_genre_id
        - children
    ChatRoom:
      type: object
      properties:
        room_id:
          type: integer
        target_user_id:
          type: integer
        target_user_name:
          type: string
        target_user_profile_image:
          type: string
        last_message:
          type: string
        last_message_sent_at:
          type: string
      required:
        - room_id
        - target_user_id
        - target_user_name
        - target_user_profile_image
    Message:
      type: object
      properties:
        message_id:
          type: integer
        user_id:
          type: integer
        content:
          type: string
        sent_at:
          type: string
      required:
        - message_id
        - user_id
        - content
        - sent_at
    SendMessageReqBody:
      properties:
        content:
          type: string
        room_id:
          type: integer
      required:
        - content
        - room_id
    Connection:
      properties:
        connection_id:
          type: integer
        target_user_id:
          type: integer
        target_user_name:
          type: string
        target_user_profile_image:
          type: string
      required:
        - connection_id
        - target_user_id
        - target_user_name
        - target_user_profile_image
    PostLike:
      properties:
        post_like_id:
          type: integer
        user_id:
          type: integer
      required:
        - post_like_id
        - user_id
    CommentLike:
      properties:
        comment_like_id:
          type: integer
        user_id:
          type: integer
      required:
        - comment_like_id
        - user_id
    CreatePostLikeReqBody:
      properties:
        post_id:
          type: integer
      required:
        - post_id
    CreateCommentLikeReqBody:
      properties:
        comment_id:
          type: integer
      required:
        - comment_id
    Comment:
      properties:
        comment_id:
          type: integer
        post_id:
          type: integer
        user:
          $ref: "#/components/schemas/User"
        content:
          type: string
        created_at:
          type: string
        likes:
          type: array
          items:
            $ref: "#/components/schemas/CommentLike"
      required:
        - comment_id
        - user
        - content
        - created_at
    ReqCreateCommentBody:
      properties:
        post_id:
          type: integer
        content:
          type: string
      required:
        - post_id
        - content
