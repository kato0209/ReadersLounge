/* tslint:disable */
/* eslint-disable */
/**
 * ReadersLounge API
 * ReadersLounge API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * OidcApi - axios parameter creator
 * @export
 */
export const OidcApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Google Sign-Up Callback
         * @param {string} state State parameter for CSRF protection
         * @param {string} code Authorization code returned by Google auth server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleSignupCallback: async (state: string, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            assertParamExists('googleSignupCallback', 'state', state)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('googleSignupCallback', 'code', code)
            const localVarPath = `/auth/google/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication google_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "google_auth", ["email", "profile", "openid"], configuration)

            // authentication state required

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary signup with Google
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupWithGoogle: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/google/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication google_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "google_auth", ["email", "profile", "openid"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OidcApi - functional programming interface
 * @export
 */
export const OidcApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OidcApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Google Sign-Up Callback
         * @param {string} state State parameter for CSRF protection
         * @param {string} code Authorization code returned by Google auth server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async googleSignupCallback(state: string, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.googleSignupCallback(state, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary signup with Google
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signupWithGoogle(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signupWithGoogle(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OidcApi - factory interface
 * @export
 */
export const OidcApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OidcApiFp(configuration)
    return {
        /**
         * 
         * @summary Google Sign-Up Callback
         * @param {string} state State parameter for CSRF protection
         * @param {string} code Authorization code returned by Google auth server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleSignupCallback(state: string, code: string, options?: any): AxiosPromise<void> {
            return localVarFp.googleSignupCallback(state, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary signup with Google
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupWithGoogle(options?: any): AxiosPromise<void> {
            return localVarFp.signupWithGoogle(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OidcApi - object-oriented interface
 * @export
 * @class OidcApi
 * @extends {BaseAPI}
 */
export class OidcApi extends BaseAPI {
    /**
     * 
     * @summary Google Sign-Up Callback
     * @param {string} state State parameter for CSRF protection
     * @param {string} code Authorization code returned by Google auth server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OidcApi
     */
    public googleSignupCallback(state: string, code: string, options?: AxiosRequestConfig) {
        return OidcApiFp(this.configuration).googleSignupCallback(state, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary signup with Google
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OidcApi
     */
    public signupWithGoogle(options?: AxiosRequestConfig) {
        return OidcApiFp(this.configuration).signupWithGoogle(options).then((request) => request(this.axios, this.basePath));
    }
}

