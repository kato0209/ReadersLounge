/* tslint:disable */
/* eslint-disable */
/**
 * ReadersLounge API
 * ReadersLounge API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Book } from '../models';
// @ts-ignore
import { BookGenreNode } from '../models';
// @ts-ignore
import { ChatRoom } from '../models';
// @ts-ignore
import { Comment } from '../models';
// @ts-ignore
import { Connection } from '../models';
// @ts-ignore
import { CreateChatRoom201Response } from '../models';
// @ts-ignore
import { CreateChatRoomRequest } from '../models';
// @ts-ignore
import { CreateConnectionRequest } from '../models';
// @ts-ignore
import { CreatePostLike201Response } from '../models';
// @ts-ignore
import { CreatePostLikeReqBody } from '../models';
// @ts-ignore
import { GetLikedPostList200Response } from '../models';
// @ts-ignore
import { Message } from '../models';
// @ts-ignore
import { Post } from '../models';
// @ts-ignore
import { ReqCreateCommentBody } from '../models';
// @ts-ignore
import { ReqLoginBody } from '../models';
// @ts-ignore
import { ReqSignupBody } from '../models';
// @ts-ignore
import { ResCsrfToken } from '../models';
// @ts-ignore
import { User } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary WebSocket Connection for chat
         * @param {number} roomId ID to specify the chat room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatSocket: async (roomId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('chatSocket', 'roomId', roomId)
            const localVarPath = `/chats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create chat room
         * @param {CreateChatRoomRequest} [createChatRoomRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChatRoom: async (createChatRoomRequest?: CreateChatRoomRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/chat-rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createChatRoomRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create comment
         * @param {ReqCreateCommentBody} [reqCreateCommentBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment: async (reqCreateCommentBody?: ReqCreateCommentBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/comments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reqCreateCommentBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create connection of following
         * @param {CreateConnectionRequest} [createConnectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConnection: async (createConnectionRequest?: CreateConnectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/follows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createConnectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create post
         * @param {string} content 
         * @param {number} rating 
         * @param {string} iSBNcode 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: async (content: string, rating: number, iSBNcode: string, image?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'content' is not null or undefined
            assertParamExists('createPost', 'content', content)
            // verify required parameter 'rating' is not null or undefined
            assertParamExists('createPost', 'rating', rating)
            // verify required parameter 'iSBNcode' is not null or undefined
            assertParamExists('createPost', 'iSBNcode', iSBNcode)
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required


            if (content !== undefined) { 
                localVarFormParams.append('content', content as any);
            }
    
            if (rating !== undefined) { 
                localVarFormParams.append('rating', rating as any);
            }
    
            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
            if (iSBNcode !== undefined) { 
                localVarFormParams.append('ISBNcode', iSBNcode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create like of Post
         * @param {CreatePostLikeReqBody} [createPostLikeReqBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPostLike: async (createPostLikeReqBody?: CreatePostLikeReqBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/post-likes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPostLikeReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get csrf token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        csrftoken: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/csrftoken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete connection of following
         * @param {number} connectionId Unique identifier of the connection to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConnection: async (connectionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectionId' is not null or undefined
            assertParamExists('deleteConnection', 'connectionId', connectionId)
            const localVarPath = `/follows/{connectionId}`
                .replace(`{${"connectionId"}}`, encodeURIComponent(String(connectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete a post
         * @param {number} postId Unique identifier of the post to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost: async (postId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('deletePost', 'postId', postId)
            const localVarPath = `/posts/{postId}`
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete like of Post
         * @param {number} postId identifier of the postId of post-likes to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePostLike: async (postId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('deletePostLike', 'postId', postId)
            const localVarPath = `/post-likes/{PostId}`
                .replace(`{${"PostId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary fetch book data from RakutenAPI
         * @param {string} [booksGenreId] ID to specify the genre in Rakuten Books
         * @param {string} [keyword] keyword to search books
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchBookData: async (booksGenreId?: string, keyword?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required

            if (booksGenreId !== undefined) {
                localVarQueryParameter['booksGenreId'] = booksGenreId;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get books genres
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooksGenres: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/books-genres`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary return users chat room list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatRooms: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/chat-rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get comments by postID
         * @param {number} postId identifier of the post to get comments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentsByPostID: async (postId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('getCommentsByPostID', 'postId', postId)
            const localVarPath = `/comments/{postId}`
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get followers connections
         * @param {number} userId ID to specify the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowerConnections: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getFollowerConnections', 'userId', userId)
            const localVarPath = `/followers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get following connections
         * @param {number} userId ID to specify the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowingConnections: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getFollowingConnections', 'userId', userId)
            const localVarPath = `/followings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get postID list of User liked
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLikedPostList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/liked-posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary return messages in a chat room
         * @param {number} roomId ID to specify the chat room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessages: async (roomId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('getMessages', 'roomId', roomId)
            const localVarPath = `/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get post by postID
         * @param {number} postId identifier of the post to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostByPostID: async (postId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('getPostByPostID', 'postId', postId)
            const localVarPath = `/posts/{postId}`
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get posts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get posts corresponding to userId
         * @param {number} userId identifier of the posts to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostsOfUser: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getPostsOfUser', 'userId', userId)
            const localVarPath = `/posts/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get user by user_id
         * @param {number} userId Unique identifier of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUser', 'userId', userId)
            const localVarPath = `/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Callback for Google OAuth
         * @param {string} state State parameter for CSRF protection
         * @param {string} code Authorization code returned by Google auth server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleOauthCallback: async (state: string, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            assertParamExists('googleOauthCallback', 'state', state)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('googleOauthCallback', 'code', code)
            const localVarPath = `/oauth/google/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication google_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "google_auth", ["email", "profile"], configuration)

            // authentication state required

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary login
         * @param {ReqLoginBody} reqLoginBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (reqLoginBody: ReqLoginBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reqLoginBody' is not null or undefined
            assertParamExists('login', 'reqLoginBody', reqLoginBody)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reqLoginBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary logout
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary search user by keyword
         * @param {string} keyword keyword to search user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUser: async (keyword: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            assertParamExists('searchUser', 'keyword', keyword)
            const localVarPath = `/search-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create new user
         * @param {ReqSignupBody} reqSignupBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup: async (reqSignupBody: ReqSignupBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reqSignupBody' is not null or undefined
            assertParamExists('signup', 'reqSignupBody', reqSignupBody)
            const localVarPath = `/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reqSignupBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update user
         * @param {string} [name] 
         * @param {File} [profileImage] 
         * @param {string} [profileText] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (name?: string, profileImage?: File, profileText?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (profileImage !== undefined) { 
                localVarFormParams.append('profile_image', profileImage as any);
            }
    
            if (profileText !== undefined) { 
                localVarFormParams.append('profile_text', profileText as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary WebSocket Connection for chat
         * @param {number} roomId ID to specify the chat room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatSocket(roomId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatSocket(roomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create chat room
         * @param {CreateChatRoomRequest} [createChatRoomRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChatRoom(createChatRoomRequest?: CreateChatRoomRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateChatRoom201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createChatRoom(createChatRoomRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create comment
         * @param {ReqCreateCommentBody} [reqCreateCommentBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createComment(reqCreateCommentBody?: ReqCreateCommentBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createComment(reqCreateCommentBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create connection of following
         * @param {CreateConnectionRequest} [createConnectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConnection(createConnectionRequest?: CreateConnectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConnection(createConnectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create post
         * @param {string} content 
         * @param {number} rating 
         * @param {string} iSBNcode 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPost(content: string, rating: number, iSBNcode: string, image?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPost(content, rating, iSBNcode, image, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create like of Post
         * @param {CreatePostLikeReqBody} [createPostLikeReqBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPostLike(createPostLikeReqBody?: CreatePostLikeReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePostLike201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPostLike(createPostLikeReqBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get csrf token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async csrftoken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResCsrfToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.csrftoken(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete connection of following
         * @param {number} connectionId Unique identifier of the connection to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteConnection(connectionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConnection(connectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete a post
         * @param {number} postId Unique identifier of the post to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePost(postId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePost(postId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete like of Post
         * @param {number} postId identifier of the postId of post-likes to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePostLike(postId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePostLike(postId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary fetch book data from RakutenAPI
         * @param {string} [booksGenreId] ID to specify the genre in Rakuten Books
         * @param {string} [keyword] keyword to search books
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchBookData(booksGenreId?: string, keyword?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Book>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchBookData(booksGenreId, keyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get books genres
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBooksGenres(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookGenreNode>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBooksGenres(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary return users chat room list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChatRooms(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChatRoom>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChatRooms(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get comments by postID
         * @param {number} postId identifier of the post to get comments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommentsByPostID(postId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Comment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCommentsByPostID(postId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get followers connections
         * @param {number} userId ID to specify the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowerConnections(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Connection>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFollowerConnections(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get following connections
         * @param {number} userId ID to specify the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowingConnections(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Connection>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFollowingConnections(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get postID list of User liked
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLikedPostList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLikedPostList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLikedPostList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoginUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoginUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary return messages in a chat room
         * @param {number} roomId ID to specify the chat room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessages(roomId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Message>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessages(roomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get post by postID
         * @param {number} postId identifier of the post to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostByPostID(postId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostByPostID(postId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get posts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPosts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Post>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPosts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get posts corresponding to userId
         * @param {number} userId identifier of the posts to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostsOfUser(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Post>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostsOfUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get user by user_id
         * @param {number} userId Unique identifier of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Callback for Google OAuth
         * @param {string} state State parameter for CSRF protection
         * @param {string} code Authorization code returned by Google auth server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async googleOauthCallback(state: string, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.googleOauthCallback(state, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary login
         * @param {ReqLoginBody} reqLoginBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(reqLoginBody: ReqLoginBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(reqLoginBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary logout
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary search user by keyword
         * @param {string} keyword keyword to search user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchUser(keyword: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchUser(keyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create new user
         * @param {ReqSignupBody} reqSignupBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signup(reqSignupBody: ReqSignupBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signup(reqSignupBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update user
         * @param {string} [name] 
         * @param {File} [profileImage] 
         * @param {string} [profileText] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(name?: string, profileImage?: File, profileText?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(name, profileImage, profileText, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary WebSocket Connection for chat
         * @param {number} roomId ID to specify the chat room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatSocket(roomId: number, options?: any): AxiosPromise<void> {
            return localVarFp.chatSocket(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create chat room
         * @param {CreateChatRoomRequest} [createChatRoomRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChatRoom(createChatRoomRequest?: CreateChatRoomRequest, options?: any): AxiosPromise<CreateChatRoom201Response> {
            return localVarFp.createChatRoom(createChatRoomRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create comment
         * @param {ReqCreateCommentBody} [reqCreateCommentBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment(reqCreateCommentBody?: ReqCreateCommentBody, options?: any): AxiosPromise<Comment> {
            return localVarFp.createComment(reqCreateCommentBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create connection of following
         * @param {CreateConnectionRequest} [createConnectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConnection(createConnectionRequest?: CreateConnectionRequest, options?: any): AxiosPromise<void> {
            return localVarFp.createConnection(createConnectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create post
         * @param {string} content 
         * @param {number} rating 
         * @param {string} iSBNcode 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(content: string, rating: number, iSBNcode: string, image?: File, options?: any): AxiosPromise<void> {
            return localVarFp.createPost(content, rating, iSBNcode, image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create like of Post
         * @param {CreatePostLikeReqBody} [createPostLikeReqBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPostLike(createPostLikeReqBody?: CreatePostLikeReqBody, options?: any): AxiosPromise<CreatePostLike201Response> {
            return localVarFp.createPostLike(createPostLikeReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get csrf token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        csrftoken(options?: any): AxiosPromise<ResCsrfToken> {
            return localVarFp.csrftoken(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete connection of following
         * @param {number} connectionId Unique identifier of the connection to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConnection(connectionId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteConnection(connectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete a post
         * @param {number} postId Unique identifier of the post to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost(postId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deletePost(postId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete like of Post
         * @param {number} postId identifier of the postId of post-likes to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePostLike(postId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deletePostLike(postId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary fetch book data from RakutenAPI
         * @param {string} [booksGenreId] ID to specify the genre in Rakuten Books
         * @param {string} [keyword] keyword to search books
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchBookData(booksGenreId?: string, keyword?: string, options?: any): AxiosPromise<Array<Book>> {
            return localVarFp.fetchBookData(booksGenreId, keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get books genres
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooksGenres(options?: any): AxiosPromise<Array<BookGenreNode>> {
            return localVarFp.getBooksGenres(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary return users chat room list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatRooms(options?: any): AxiosPromise<Array<ChatRoom>> {
            return localVarFp.getChatRooms(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get comments by postID
         * @param {number} postId identifier of the post to get comments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentsByPostID(postId: number, options?: any): AxiosPromise<Array<Comment>> {
            return localVarFp.getCommentsByPostID(postId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get followers connections
         * @param {number} userId ID to specify the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowerConnections(userId: number, options?: any): AxiosPromise<Array<Connection>> {
            return localVarFp.getFollowerConnections(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get following connections
         * @param {number} userId ID to specify the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowingConnections(userId: number, options?: any): AxiosPromise<Array<Connection>> {
            return localVarFp.getFollowingConnections(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get postID list of User liked
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLikedPostList(options?: any): AxiosPromise<GetLikedPostList200Response> {
            return localVarFp.getLikedPostList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginUser(options?: any): AxiosPromise<User> {
            return localVarFp.getLoginUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary return messages in a chat room
         * @param {number} roomId ID to specify the chat room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessages(roomId: number, options?: any): AxiosPromise<Array<Message>> {
            return localVarFp.getMessages(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get post by postID
         * @param {number} postId identifier of the post to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostByPostID(postId: number, options?: any): AxiosPromise<Post> {
            return localVarFp.getPostByPostID(postId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get posts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts(options?: any): AxiosPromise<Array<Post>> {
            return localVarFp.getPosts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get posts corresponding to userId
         * @param {number} userId identifier of the posts to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostsOfUser(userId: number, options?: any): AxiosPromise<Array<Post>> {
            return localVarFp.getPostsOfUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get user by user_id
         * @param {number} userId Unique identifier of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: number, options?: any): AxiosPromise<User> {
            return localVarFp.getUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Callback for Google OAuth
         * @param {string} state State parameter for CSRF protection
         * @param {string} code Authorization code returned by Google auth server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleOauthCallback(state: string, code: string, options?: any): AxiosPromise<void> {
            return localVarFp.googleOauthCallback(state, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary login
         * @param {ReqLoginBody} reqLoginBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(reqLoginBody: ReqLoginBody, options?: any): AxiosPromise<User> {
            return localVarFp.login(reqLoginBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary logout
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(body?: object, options?: any): AxiosPromise<void> {
            return localVarFp.logout(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary search user by keyword
         * @param {string} keyword keyword to search user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUser(keyword: string, options?: any): AxiosPromise<Array<User>> {
            return localVarFp.searchUser(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create new user
         * @param {ReqSignupBody} reqSignupBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(reqSignupBody: ReqSignupBody, options?: any): AxiosPromise<User> {
            return localVarFp.signup(reqSignupBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update user
         * @param {string} [name] 
         * @param {File} [profileImage] 
         * @param {string} [profileText] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(name?: string, profileImage?: File, profileText?: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateUser(name, profileImage, profileText, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary WebSocket Connection for chat
     * @param {number} roomId ID to specify the chat room
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public chatSocket(roomId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).chatSocket(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create chat room
     * @param {CreateChatRoomRequest} [createChatRoomRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createChatRoom(createChatRoomRequest?: CreateChatRoomRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createChatRoom(createChatRoomRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create comment
     * @param {ReqCreateCommentBody} [reqCreateCommentBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createComment(reqCreateCommentBody?: ReqCreateCommentBody, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createComment(reqCreateCommentBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create connection of following
     * @param {CreateConnectionRequest} [createConnectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createConnection(createConnectionRequest?: CreateConnectionRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createConnection(createConnectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create post
     * @param {string} content 
     * @param {number} rating 
     * @param {string} iSBNcode 
     * @param {File} [image] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createPost(content: string, rating: number, iSBNcode: string, image?: File, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createPost(content, rating, iSBNcode, image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create like of Post
     * @param {CreatePostLikeReqBody} [createPostLikeReqBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createPostLike(createPostLikeReqBody?: CreatePostLikeReqBody, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createPostLike(createPostLikeReqBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get csrf token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public csrftoken(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).csrftoken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete connection of following
     * @param {number} connectionId Unique identifier of the connection to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteConnection(connectionId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteConnection(connectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete a post
     * @param {number} postId Unique identifier of the post to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletePost(postId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deletePost(postId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete like of Post
     * @param {number} postId identifier of the postId of post-likes to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletePostLike(postId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deletePostLike(postId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary fetch book data from RakutenAPI
     * @param {string} [booksGenreId] ID to specify the genre in Rakuten Books
     * @param {string} [keyword] keyword to search books
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchBookData(booksGenreId?: string, keyword?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fetchBookData(booksGenreId, keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get books genres
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBooksGenres(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBooksGenres(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary return users chat room list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getChatRooms(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getChatRooms(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get comments by postID
     * @param {number} postId identifier of the post to get comments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCommentsByPostID(postId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCommentsByPostID(postId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get followers connections
     * @param {number} userId ID to specify the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFollowerConnections(userId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFollowerConnections(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get following connections
     * @param {number} userId ID to specify the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFollowingConnections(userId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFollowingConnections(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get postID list of User liked
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLikedPostList(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getLikedPostList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLoginUser(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getLoginUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary return messages in a chat room
     * @param {number} roomId ID to specify the chat room
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMessages(roomId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMessages(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get post by postID
     * @param {number} postId identifier of the post to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPostByPostID(postId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPostByPostID(postId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get posts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPosts(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPosts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get posts corresponding to userId
     * @param {number} userId identifier of the posts to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPostsOfUser(userId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPostsOfUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get user by user_id
     * @param {number} userId Unique identifier of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUser(userId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Callback for Google OAuth
     * @param {string} state State parameter for CSRF protection
     * @param {string} code Authorization code returned by Google auth server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public googleOauthCallback(state: string, code: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).googleOauthCallback(state, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary login
     * @param {ReqLoginBody} reqLoginBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(reqLoginBody: ReqLoginBody, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login(reqLoginBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary logout
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logout(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logout(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary search user by keyword
     * @param {string} keyword keyword to search user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchUser(keyword: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).searchUser(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create new user
     * @param {ReqSignupBody} reqSignupBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signup(reqSignupBody: ReqSignupBody, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).signup(reqSignupBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update user
     * @param {string} [name] 
     * @param {File} [profileImage] 
     * @param {string} [profileText] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUser(name?: string, profileImage?: File, profileText?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateUser(name, profileImage, profileText, options).then((request) => request(this.axios, this.basePath));
    }
}

