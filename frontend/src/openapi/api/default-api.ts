/* tslint:disable */
/* eslint-disable */
/**
 * ReadersLounge API
 * ReadersLounge API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Post } from '../models';
// @ts-ignore
import { ReqLoginBody } from '../models';
// @ts-ignore
import { ReqSignupBody } from '../models';
// @ts-ignore
import { ResCsrfToken } from '../models';
// @ts-ignore
import { ResSignupBody } from '../models';
// @ts-ignore
import { User } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get csrf token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        csrftoken: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/csrftoken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary login
         * @param {ReqLoginBody} reqLoginBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (reqLoginBody: ReqLoginBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reqLoginBody' is not null or undefined
            assertParamExists('login', 'reqLoginBody', reqLoginBody)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reqLoginBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary logout
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary posts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        posts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)

            // authentication jwtAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create new user
         * @param {ReqSignupBody} reqSignupBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup: async (reqSignupBody: ReqSignupBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reqSignupBody' is not null or undefined
            assertParamExists('signup', 'reqSignupBody', reqSignupBody)
            const localVarPath = `/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-CSRF-TOKEN required
            await setApiKeyToObject(localVarHeaderParameter, "X-CSRF-TOKEN", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reqSignupBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get csrf token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async csrftoken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResCsrfToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.csrftoken(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary login
         * @param {ReqLoginBody} reqLoginBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(reqLoginBody: ReqLoginBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(reqLoginBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary logout
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary posts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async posts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.posts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create new user
         * @param {ReqSignupBody} reqSignupBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signup(reqSignupBody: ReqSignupBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResSignupBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signup(reqSignupBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary get csrf token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        csrftoken(options?: any): AxiosPromise<ResCsrfToken> {
            return localVarFp.csrftoken(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary login
         * @param {ReqLoginBody} reqLoginBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(reqLoginBody: ReqLoginBody, options?: any): AxiosPromise<User> {
            return localVarFp.login(reqLoginBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary logout
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(body?: object, options?: any): AxiosPromise<void> {
            return localVarFp.logout(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary posts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        posts(options?: any): AxiosPromise<Post> {
            return localVarFp.posts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create new user
         * @param {ReqSignupBody} reqSignupBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(reqSignupBody: ReqSignupBody, options?: any): AxiosPromise<ResSignupBody> {
            return localVarFp.signup(reqSignupBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary get csrf token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public csrftoken(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).csrftoken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary login
     * @param {ReqLoginBody} reqLoginBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(reqLoginBody: ReqLoginBody, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login(reqLoginBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary logout
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logout(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logout(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary posts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public posts(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).posts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create new user
     * @param {ReqSignupBody} reqSignupBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signup(reqSignupBody: ReqSignupBody, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).signup(reqSignupBody, options).then((request) => request(this.axios, this.basePath));
    }
}

