name: ReadersLounge Deploy

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/deploy.yml'
      - 'backend/**'
      - 'frontend/**'
      - 'infra/terraform/**'
      - 'db/**'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-1
  ECS_CLUSTER: readerslounge-ecs-cluster
  ECS_SERVICE_FRONT: readerslounge-front-ecs-service
  ECS_SERVICE_API: readerslounge-api-ecs-service
  MIGRATION_TASK_DEFINITION_NAME : readerslounge-goose-migration-task

  

defaults:
  run:
    working-directory: infra/terraform

jobs:
  preview:
    name: "Preview"
    runs-on: ubuntu-latest
    outputs:
      TF_PLAN_EXITCODE: ${{ steps.plan.outputs.exitcode }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform format
        run: terraform fmt -check
      
      - name: Configure AWS Credential
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
      
      - name: Terraform init
        run: terraform init
      
      - name: Terraform validate
        run: |
          terraform validate
      
      - name: Terraform plan
        id: plan
        continue-on-error: true
        run: |
          terraform plan \
            -input=false \
            -detailed-exitcode \
            -var 'DB_USERNAME=${{ secrets.DB_USERNAME }}' \
            -var 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' \
            -var 'DB_NAME=${{ secrets.DB_NAME }}' \
            -var 'PGDATABASE=${{ secrets.PGDATABASE }}' \
            -var 'PGUSER=${{ secrets.PGUSER }}' \
            -var 'PGPASSWORD=${{ secrets.PGPASSWORD }}' \
            -var 'JWT_SECRET=${{ secrets.JWT_SECRET }}' \
            -var 'GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}' \
            -var 'GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}' \
            -var 'RAKUTEN_APPLICATION_ID=${{ secrets.RAKUTEN_APPLICATION_ID }}' \
            -var 'AWS_REGION=${{ secrets.AWS_REGION }}' \
            -var 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' \
            -var 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            -var 'S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}' \
            -var 'VITE_GOOGLE_OAUTH_CLIENT_ID=${{ secrets.VITE_GOOGLE_OAUTH_CLIENT_ID }}' \
            -var 'VITE_GOOGLE_CLIENT_SECRET=${{ secrets.VITE_GOOGLE_CLIENT_SECRET }}' \
      
      - name: Slack Notify
        if: steps.plan.outputs.exitcode == 2
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: "C06JLQLHP4L"
          payload: |
            {
              "attachments": [
                {
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": "Terraform plan result",
                        "emoji": true
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "Terraform plan has diffrential \n ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                      }
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
            
  deploy:
    name: "Deploy"
    needs: preview
    if: needs.preview.outputs.TF_PLAN_EXITCODE == 2
    runs-on: ubuntu-latest
    outputs:
      subnet_1a_id: ${{ steps.apply.outputs.subnet_1a_id }}
      subnet_1c_id: ${{ steps.apply.outputs.subnet_1c_id }}
      security_group_id: ${{ steps.apply.outputs.security_group_id }}
      task_definition_arn: ${{ steps.apply.outputs.task_definition_arn }}
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Terraform format
        run: |
         terraform fmt -check

      - name: Configure AWS Credential
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
      
      - name: Terraform init
        run: terraform init

      - name: Terraform apply
        id: apply
        run: |
          terraform apply -auto-approve -input=false \
          -var 'DB_USERNAME=${{ secrets.DB_USERNAME }}' \
          -var 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' \
          -var 'DB_NAME=${{ secrets.DB_NAME }}' \
          -var 'PGDATABASE=${{ secrets.PGDATABASE }}' \
          -var 'PGUSER=${{ secrets.PGUSER }}' \
          -var 'PGPASSWORD=${{ secrets.PGPASSWORD }}' \
          -var 'JWT_SECRET=${{ secrets.JWT_SECRET }}' \
          -var 'GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}' \
          -var 'GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}' \
          -var 'RAKUTEN_APPLICATION_ID=${{ secrets.RAKUTEN_APPLICATION_ID }}' \
          -var 'AWS_REGION=${{ secrets.AWS_REGION }}' \
          -var 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' \
          -var 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
          -var 'S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}' \
          -var 'VITE_GOOGLE_OAUTH_CLIENT_ID=${{ secrets.VITE_GOOGLE_OAUTH_CLIENT_ID }}' \
          -var 'VITE_GOOGLE_CLIENT_SECRET=${{ secrets.VITE_GOOGLE_CLIENT_SECRET }}'

          echo "subnet_1a_id=$(terraform output -raw subnet_1a_id)" >> $GITHUB_OUTPUT
          echo "subnet_1c_id=$(terraform output -raw subnet_1c_id)" >> $GITHUB_OUTPUT
          echo "security_group_id=$(terraform output -raw security_group_id)" >> $GITHUB_OUTPUT
          echo "task_definition_arn=$(terraform output -raw task_definition_arn)" >> $GITHUB_OUTPUT
      
      - name: Slack Notify
        if: always()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: "C06JLQLHP4L"
          payload: |
            {
              "attachments": [
                {
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": "Runner Finished: ${{ steps.apply.outcome }}",
                        "emoji": true
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                      }
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
           
  ecr-push-image:
    name: "ECR Push Image"
    defaults:
      run:
        working-directory: ./
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credential
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: build and push docker front-image to ECR
        id: build-front-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: "readerslounge-front"
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build ./frontend --tag ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
      
      - name: build and push docker api-image to ECR
        id: build-api-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: "readerslounge-api"
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build ./backend --file ./backend/Dockerfile.prod --tag ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
      
      - name: build and push docker migration-image to ECR
        id: build-migration-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: "readerslounge-migration"
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build ./db/migration --file ./db/Dockerfile --tag ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
      
      - name: ECS UPDATE
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE_FRONT }} --force-new-deployment
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE_API }} --force-new-deployment

  run-migration:
    name: "Run migration"
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credential
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
       
      - name: Install AWS CLI
        shell: bash
        run: |
          if ! [ -x "$(command -v aws)" ]; then
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install --update
            aws --version
          fi

      - name: Run migration
        run: |
          aws ecs run-task \
          --cluster ${{ env.ECS_CLUSTER }} \
          --task-definition arn:aws:ecs:ap-northeast-1:620958051842:task-definition/readerslounge-goose-migration-task:6 \
          --network-configuration "awsvpcConfiguration={subnets=[${{ needs.deploy.outputs.subnet_1a_id }}, ${{ needs.deploy.outputs.subnet_1c_id }}],securityGroups=[${{ needs.deploy.outputs.security_group_id }}],assignPublicIp=ENABLED}" \
          --enable-execute-command \
          --launch-type FARGATE
